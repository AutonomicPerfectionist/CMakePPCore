include(cmake_test/cmake_test)

ct_add_test("cpp_function")
    include(cmakepp_core/function/function)
    set(CMAKEPP_CORE_DEBUG_MODE ON)

    ct_add_section("Returns the mangled name")
        cpp_function(a_fxn int bool)
        _cpp_mangle_fxn(corr a_fxn int bool)
        ct_assert_equal(a_fxn "${corr}")
    ct_end_section()

    ct_add_section("Takes no args")
        cpp_function(fxn_name)
        function("${fxn_name}")
            message("Hello World")
        endfunction()

        ct_add_section("Fails if any arguments are passed")
            fxn_name(0)
            ct_assert_fails_as("Function takes 0 argument(s), but 1 was/were")
        ct_end_section()

        ct_add_section("Can actually be called")
            fxn_name()
        ct_end_section()
    ct_end_section()

    ct_add_section("Takes only *args")
        cpp_function(fxn_name args)
        function("${fxn_name}")
            message("Hello: ${ARGN}")
        endfunction()

        ct_add_section("Can be called with 0 arguments")
            fxn_name()
        ct_end_section()

        ct_add_section("Can be called with 1 argument")
            fxn_name(world)
        ct_end_section()
    ct_end_section()

    ct_add_section("Takes one arg")
        cpp_function(fxn_name int)
        function("${fxn_name}" the_int)
            message("The int is ${the_int}")
        endfunction()

        ct_add_section("Fails if arg 1 is not an int")
            fxn_name(TRUE)
            ct_assert_fails_as("Assertion: TRUE is int")
        ct_end_section()

        ct_add_section("Fails if more than one argument is passed")
            fxn_name(1 TRUE)
            ct_assert_fails_as("Function takes 1 argument(s), but 2 was/were")
        ct_end_section()

        ct_add_section("Can actually be called")
            fxn_name(1)
        ct_end_section()
    ct_end_section()

    ct_add_section("Takes one arg and *args")
        cpp_function(fxn_name int args)
        function("${fxn_name}" the_int)
            message("The int is ${the_int} and ARGS is ${ARGN}")
        endfunction()

        ct_add_section("Fails if arg 1 is not an int")
            fxn_name(TRUE)
            ct_assert_fails_as("Assertion: TRUE is int")
        ct_end_section()

        ct_add_section("Can be called with one argument")
            fxn_name(1)
        ct_end_section()

        ct_add_section("Can be called with two arguments")
            fxn_name(1 TRUE)
        ct_end_section()
    ct_end_section()

    ct_add_section("Takes two args")
        cpp_function(fxn_name int bool)
        function("${fxn_name}" the_int the_bool)
            message("The integer is ${the_int} and the bool is ${the_bool}")
        endfunction()

        ct_add_section("Fails if 1st argument is not an int")
            fxn_name(TRUE FALSE)
            ct_assert_fails_as("Assertion: TRUE is int")
        ct_end_section()

        ct_add_section("Fails if 2nd argument is not a bool")
            fxn_name(0 1)
            ct_assert_fails_as("Assertion: 1 is bool")
        ct_end_section()

        ct_add_section("Fails if more than 2 arguments passed")
            fxn_name(0 TRUE hello)
            ct_assert_fails_as("Function takes 2 argument(s), but 3 was/were")
        ct_end_section()

        ct_add_section("Can actually be called")
            fxn_name(0 TRUE)
        ct_end_section()
    ct_end_section()

    ct_add_section("Takes two args and *args")
        cpp_function(fxn_name int bool args)
        function("${fxn_name}" the_int the_bool)
            message("The values are: ${the_int}, ${the_bool}, ${ARGN}")
        endfunction()

        ct_add_section("Fails if 1st argument is not an int")
            fxn_name(TRUE FALSE)
            ct_assert_fails_as("Assertion: TRUE is int")
        ct_end_section()

        ct_add_section("Fails if 2nd argument is not a bool")
            fxn_name(0 1)
            ct_assert_fails_as("Assertion: 1 is bool")
        ct_end_section()

        ct_add_section("Can be called with only two arguments")
            fxn_name(0 TRUE)
        ct_end_section()

        ct_add_section("Can be called with more than two arguments")
            fxn_name(0 TRUE 1)
        ct_end_section()
    ct_end_section()
ct_end_test()

include(cmake_test/cmake_test)

ct_add_test("_cpp_object_add_function")
    include(cmakepp_core/algorithm/equal)
    include(cmakepp_core/object/detail_/add_function)
    include(cmakepp_core/object/detail_/ctor)
    include(cmakepp_core/object/detail_/get_state)

    _cpp_object_ctor(an_object)

    ct_add_section("Section")
        set(CMAKEPP_CORE_DEBUG_MODE ON)

        ct_add_section("Arg0 must be obj")
            _cpp_object_add_function(TRUE a_fxn a_class)
            ct_assert_fails_as("Assertion: TRUE is obj")
        ct_end_section()

        ct_add_section("Arg1 must be desc")
            _cpp_object_add_function(${an_object} TRUE a_class)
            ct_assert_fails_as("Assertion: TRUE is desc")
        ct_end_section()

        ct_add_section("Arg2 must be desc")
            _cpp_object_add_function("${an_object}" a_fxn TRUE)
            ct_assert_fails_as("Assertion: TRUE is desc")
        ct_end_section()

        ct_add_section("Takes 3 arguments")
            _cpp_object_add_function("${an_object}" a_fxn a_class hi)
            ct_assert_fails_as("Function takes 3 argument(s), but 4 was/were")
        ct_end_section()
    ct_end_section()

    ct_add_section("Can add a function")
        _cpp_object_add_function("${an_object}" a_fxn a_class)
        cpp_map(CTOR corr a_fxn a_class)
        _cpp_object_get_vtable("${an_object}" vtable)
        cpp_equal(result "${vtable}" "${corr}")
        ct_assert_equal(result TRUE)
    ct_end_section()

    ct_add_section("Same function does not overwrite existing function")
        _cpp_object_add_function("${an_object}" a_fxn a_class)
        _cpp_object_add_function("${an_object}" a_fxn another_class)
        cpp_map(CTOR corr a_fxn a_class)
        _cpp_object_get_vtable("${an_object}" vtable)
        cpp_equal(result "${vtable}" "${corr}")
        ct_assert_equal(result TRUE)
    ct_end_section()

    ct_add_section("Can add multiple functions")
        _cpp_object_add_function("${an_object}" a_fxn a_class)
        _cpp_object_add_function("${an_object}" another_fxn another_class)
        cpp_map(CTOR corr a_fxn a_class another_fxn another_class)
        _cpp_object_get_vtable("${an_object}" vtable)
        cpp_equal(result "${vtable}" "${corr}")
        ct_assert_equal(result TRUE)
    ct_end_section()

ct_end_test()

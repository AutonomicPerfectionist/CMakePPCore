include(cmake_test/cmake_test)

ct_add_test("_cpp_is_type")
    include(cmakepp_core/types/detail_/type)

    ct_add_section("bool")
        _cpp_is_type(return TRUE)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("descriptions")
        ct_add_section("description w/o a type")
            _cpp_is_type(return "Hello World")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("description containing a type")
            _cpp_is_type(return "Hello World bool")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("filepath")
        ct_add_section("Normal filepath (probably)")
            _cpp_is_type(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("Contains a type")
            _cpp_is_type(return "${CMAKE_CURRENT_LIST_DIR}/bool")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("float")
        _cpp_is_type(return 3.14)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("integer")
        _cpp_is_type(return 42)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("list")
        ct_add_section("Normal list")
            _cpp_is_type(return "hello;world")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("List of floats")
            _cpp_is_type(return "1.23;2.34;3.45")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("map")
        include(cmakepp_core/map/ctor)
        _cpp_map_ctor(my_map)
        _cpp_is_type(result "${my_map}")
        ct_assert_equal(result FALSE)
    ct_end_section()

    ct_add_section("target")
        ct_add_section("normal target name")
            add_library(lib STATIC IMPORTED)
            _cpp_is_type(return lib)
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("target with type")
            add_library(lib_bool STATIC IMPORTED)
            _cpp_is_type(return lib_bool)
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("type")
        ct_add_section("bool")
            _cpp_is_type(result bool)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("desc")
            _cpp_is_type(result desc)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("path")
            _cpp_is_type(result path)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("float")
            _cpp_is_type(result float)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("int")
            _cpp_is_type(result int)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("list")
            _cpp_is_type(result list)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("map")
            _cpp_is_type(result map)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("obj")
            _cpp_is_type(result obj)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("str")
            _cpp_is_type(result str)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("target")
            _cpp_is_type(result target)
            ct_assert_equal(result TRUE)
        ct_end_section()

        ct_add_section("type")
            _cpp_is_type(result type)
            ct_assert_equal(result TRUE)
        ct_end_section()

    ct_end_section()
ct_end_test()

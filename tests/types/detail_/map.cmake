include(cmake_test/cmake_test)

ct_add_test("_cpp_is_map")
    include(cmakepp_core/map/detail_/ctor)
    include(cmakepp_core/types/detail_/map)

    ct_add_section("array")
        include(cmakepp_core/array/detail_/ctor)
        _cpp_array_ctor(my_array)
        _cpp_is_map(result "${my_array}")
        ct_assert_equal(result FALSE)
    ct_end_section()

    ct_add_section("bool")
        _cpp_is_map(return TRUE)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("description")
        _cpp_is_map(return "Hello World")
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("filepath")
        _cpp_is_map(return "${CMAKE_CURRENT_LIST_DIR}")
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("float")
        _cpp_is_map(return 3.14)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("integer")
        _cpp_is_map(return 42)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("list")
        ct_add_section("Normal list")
            _cpp_is_map(return "hello;world")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("List of maps")
            _cpp_map_ctor(my_map)
            _cpp_is_map(return "${my_map};${my_map}")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("map")
        _cpp_map_ctor(my_map)
        _cpp_is_map(result "${my_map}")
        ct_assert_equal(result TRUE)
    ct_end_section()

    ct_add_section("target")
        add_library(lib STATIC IMPORTED)
        _cpp_is_map(return lib)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("type")
        _cpp_is_map(return bool)
        ct_assert_equal(return FALSE)
    ct_end_section()
ct_end_test()

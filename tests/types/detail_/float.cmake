include(cmake_test/cmake_test)

ct_add_test("_cpp_is_float")
    include(cmakepp_core/types/detail_/float)

    ct_add_section("bool")
        _cpp_is_float(return TRUE)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("descriptions")
        ct_add_section("description w/o a float")
            _cpp_is_float(return "Hello World")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("description containing a float")
            _cpp_is_float(return "Hello World 3.14")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("filepath")
        ct_add_section("Normal filepath (probably)")
            _cpp_is_float(return "${CMAKE_CURRENT_LIST_DIR}")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("Contains a float")
            _cpp_is_float(return "${CMAKE_CURRENT_LIST_DIR}/hello1")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("float")
        ct_add_section("positive")
            _cpp_is_float(return 3.14)
            ct_assert_equal(return TRUE)
        ct_end_section()

        ct_add_section("negative")
            _cpp_is_float(return -3.14)
            ct_assert_equal(return TRUE)
        ct_end_section()
    ct_end_section()

    ct_add_section("integer")
        _cpp_is_float(return 42)
        ct_assert_equal(return FALSE)
    ct_end_section()

    ct_add_section("list")
        ct_add_section("Normal list")
            _cpp_is_float(return "hello;world")
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("List of floats")
            _cpp_is_float(return "1.23;2.34;3.45")
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("map")
        include(cmakepp_core/map/ctor)
        _cpp_map_ctor(my_map)
        _cpp_is_float(result "${my_map}")
        ct_assert_equal(result FALSE)
    ct_end_section()

    ct_add_section("target")
        ct_add_section("normal target name")
            add_library(lib STATIC IMPORTED)
            _cpp_is_float(return lib)
            ct_assert_equal(return FALSE)
        ct_end_section()

        ct_add_section("target with float")
            add_library(lib3.14 STATIC IMPORTED)
            _cpp_is_float(return lib1)
            ct_assert_equal(return FALSE)
        ct_end_section()
    ct_end_section()

    ct_add_section("type")
        _cpp_is_float(return bool)
        ct_assert_equal(return FALSE)
    ct_end_section()

ct_end_test()

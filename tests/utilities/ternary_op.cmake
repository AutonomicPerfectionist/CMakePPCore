include(cmake_test/cmake_test)

ct_add_test("ternary_op")
    include(cmakepp_core/utilities/ternary_op)
    ct_add_section("true branch")
        set(input "foo")
        cpp_ternary_op(result "${input};STREQUAL;foo" "was_true" "was_false" )
        ct_assert_equal(result "was_true")
    ct_end_section()

    ct_add_section("false branch")
        cpp_ternary_op(result "foo;STREQUAL;bar" "was_true" "was_false")
        ct_assert_equal(result "was_false")
    ct_end_section()

    ct_add_section("conditions with empty string")
        ct_add_section("one empty string LHS")
            cpp_ternary_op(result " ;STREQUAL;bar" "was_true" "was_false")
            ct_assert_equal(result "was_false")
        ct_end_section()

        ct_add_section("one empty string RHS")
            cpp_ternary_op(result "foo;STREQUAL; " "was_true" "was_false")
            ct_assert_equal(result "was_false")
        ct_end_section()

        ct_add_section("two empty strings")
            cpp_ternary_op(result " ;STREQUAL; " "was_true" "was_false")
            ct_assert_equal(result "was_true")
        ct_end_section()
    ct_end_section()

    ct_add_section("More complicated operation")
        ct_add_section("Evaluates to true")
            cpp_ternary_op(result "1;STREQUAL;2;OR;1;STREQUAL;1" "t" "f")
            ct_assert_equal(result "t")
        ct_end_section()

        ct_add_section("Evaluates to false")
            cpp_ternary_op(result "1;STREQUAL;2;OR;1;STREQUAL;2" "t" "f")
            ct_assert_equal(result "f")
        ct_end_section()
    ct_end_section()

    ct_add_section("Comparing lists")
        ct_add_section("Lists are equal")
            cpp_ternary_op(result "[[1;2;3]];STREQUAL;[[1;2;3]]" "t" "f")
            ct_assert_equal(result "t")
        ct_end_section()

        ct_add_section("Lists are different")
            cpp_ternary_op(result "[[1;2;3]];STREQUAL;[[1;3;5]]" "t" "f")
            ct_assert_equal(result "f")
        ct_end_section()
    ct_end_section()
ct_end_test()

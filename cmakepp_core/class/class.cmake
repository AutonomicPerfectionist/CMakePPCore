include_guard()
include(cmakepp_core/class/detail_/ctor)
include(cmakepp_core/class/detail_/get_class_registry)
include(cmakepp_core/utilities/read_template)

function(_cpp_class _cc_type _cc_file)
    _cpp_get_class_registry(_cc_registry)
    set(_cc_fxn_regex [[cpp_member\(([A-Za-z0-9_]+)[ \t\r\n]+([^\)]*)]])
    string(TOUPPER "${_cc_type}" _cc_uc_type)
    cpp_map(HAS_KEY _cc_exists "${_cc_registry}" "${_cc_uc_type}")

    if(_cc_exists) # Early abort if we've seen this class
        return()
    endif()

    _cpp_class_ctor(_cc_new_class "${_cc_type}" ${ARGN})
    cpp_read_template(_cc_contents "${_cc_file}")
    set(_cc_in_fxn TRUE)
    foreach(_cc_line_i ${_cc_contents})
        string(REGEX MATCH "${_cc_fxn_regex}" _cc_hit "${_cc_line_i}")
        if(NOT "${_cc_hit}" STREQUAL "")
            set(_cc_fxn_name "${CMAKE_MATCH_1}")
            set(_cc_fxn_args "${CMAKE_MATCH_2}")
            message("Start of member function: ${_cc_fxn_name}")
            message("Args: ${_cc_fxn_args}")
        endif()
    endforeach()
    message(FATAL_ERROR "contents")
    cpp_map(SET "${_cc_registry}" "${_cc_uc_type}" "${_cc_new_class}")
endfunction()

macro(cpp_class _cc_type)
    _cpp_class("${_cc_type}" "${CMAKE_CURRENT_LIST_FILE}" ${ARGN})
endmacro()
